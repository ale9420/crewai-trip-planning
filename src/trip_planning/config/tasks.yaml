destination_search_task:
  description: >
    Research destination {destination} for travel from {start_date} to {end_date}.
    Consider: {budget}, {travelers}, {trip_type}, {accomodation}, {flights}, {origin}
  expected_output: >
    {
      "weather": {
        "temperature_range": "string",
        "conditions": "string",
        "seasonal_alerts": ["string"]
      },
      "events": {
        "holidays": ["string"],
        "festivals": ["string"],
        "special_events": ["string"]
      },
      "entry_requirements": {
        "visa": {
          "required": boolean,
          "process": "string",
          "cost": "string",
          "timeline": "string"
        },
        "health": {
          "vaccinations": ["string"],
          "covid_rules": "string",
          "insurance": "string"
        }
      }
    }
  agent: travel_searcher

flight_search_task:
  description: >
    Search flights using multiple sources for {origin} to {destination}.
    Consider: {budget}, {travelers}, {trip_type}, {start_date}, {end_date}, {flights}
  expected_output: >
    {
      "summary": {
        "total_options": integer,
        "price_range": {
          "lowest": "string",
          "highest": "string",
          "currency": "string"
        },
        "best_value": ["string"]
      },
      "flight_options": [
        {
          "flight_details": {
            "airline": "string",
            "flight_number": "string",
            "departure": {
              "time": "string",
              "airport": "string"
            },
            "arrival": {
              "time": "string",
              "airport": "string"
            },
            "duration": "string",
            "stops": {
              "count": integer,
              "layovers": [
                {
                  "airport": "string",
                  "duration": "string"
                }
              ]
            }
          },
          "pricing": {
            "total": "string",
            "breakdown": {
              "base": "string",
              "taxes": "string",
              "fees": "string"
            }
          }
        }
      ]
    }
  agent: travel_searcher

accommodation_search_task:
  description: >
    Search accommodations in {destination} from {start_date} to {end_date}.
    Consider: {budget}, {travelers}, {trip_type}, {accomodation}
  expected_output: >
    {
      "summary": {
        "total_options": integer,
        "price_range": {
          "lowest": "string",
          "highest": "string",
          "currency": "string"
        },
        "best_value": ["string"]
      },
      "accommodations": [
        {
          "basic_info": {
            "name": "string",
            "type": "string",
            "rating": float,
            "address": "string",
            "location": "string"
          },
          "pricing": {
            "total": "string",
            "per_night": "string",
            "fees": "string"
          },
          "features": {
            "amenities": ["string"],
            "room_types": ["string"],
            "accessibility": ["string"]
          }
        }
      ]
    }
  agent: travel_searcher

transportation_search_task:
  description: >
    Research local transportation in {destination} from {start_date} to {end_date}.
    Consider: {budget}, {travelers}, {trip_type}
  expected_output: >
    {
      "summary": {
        "options": ["string"],
        "price_range": {
          "lowest": "string",
          "highest": "string",
          "currency": "string"
        }
      },
      "public_transit": {
        "types": ["string"],
        "costs": {
          "single": "string",
          "day_pass": "string",
          "weekly": "string"
        },
        "coverage": ["string"]
      },
      "private_options": {
        "taxi": {
          "availability": "string",
          "costs": "string"
        },
        "rental": {
          "types": ["string"],
          "costs": "string"
        }
      }
    }
  agent: travel_searcher

attraction_search_task:
  description: >
    Research attractions in {destination} for {start_date} to {end_date}.
    Consider: {budget}, {travelers}, {trip_type}
  expected_output: >
    {
      "summary": {
        "total": integer,
        "categories": ["string"],
        "price_range": {
          "free": ["string"],
          "paid": {
            "low": "string",
            "high": "string",
            "currency": "string"
          }
        }
      },
      "attractions": [
        {
          "name": "string",
          "type": "string",
          "cost": "string",
          "timing": {
            "duration": "string",
            "hours": "string",
            "best_time": "string"
          }
        }
      ]
    }
  agent: travel_searcher

dining_search_task:
  description: >
    Research dining options in {destination}.
    Consider: {budget}, {travelers}, {trip_type}
  expected_output: >
    {
      "summary": {
        "total": integer,
        "cuisines": ["string"],
        "price_ranges": {
          "budget": ["string"],
          "mid": ["string"],
          "high": ["string"]
        }
      },
      "restaurants": [
        {
          "name": "string",
          "cuisine": "string",
          "price_range": "string",
          "location": "string",
          "highlights": ["string"]
        }
      ]
    }
  agent: travel_searcher

structure_itinerary_task:
  description: >
    Create daily itinerary from {start_date} to {end_date}.
    Consider: {travelers}, {trip_type}
  expected_output: >
    {
      "summary": {
        "days": integer,
        "highlights": ["string"]
      },
      "days": [
        {
          "date": "string",
          "activities": [
            {
              "time": "string",
              "type": "string",
              "details": "string",
              "duration": "string"
            }
          ]
        }
      ]
    }
  agent: itinerary_planner

validate_itinerary_task:
  description: >
    Validate complete itinerary for {start_date} to {end_date}.
    Consider: {budget}, {travelers}, {trip_type}
  expected_output: >
    {
      "validation": {
        "score": float,
        "issues": ["string"],
        "recommendations": ["string"]
      },
      "checks": {
        "timing": boolean,
        "budget": boolean,
        "feasibility": boolean
      }
    }
  agent: quality_assurance

budget_final_check_task:
  description: >
    Verify budget compliance for complete trip plan.
    Consider: {budget}, {travelers}, {trip_type}
  expected_output: >
    {
      "summary": {
        "total": "string",
        "remaining": "string",
        "status": "string"
      },
      "breakdown": {
        "transport": "string",
        "accommodation": "string",
        "activities": "string",
        "dining": "string",
        "other": "string"
      }
    }
  agent: budget_manager

create_travel_document_task:
  description: >
    Create comprehensive travel document with all trip details.
    Consider: {start_date}, {end_date}, {travelers}, {trip_type}
  expected_output: >
    {
      "document": {
        "version": "string",
        "sections": [
          {
            "title": "string",
            "content": {
              "type": "string",
              "data": "string"
            }
          }
        ]
      }
    }
  agent: quality_assurance





